# generated by datamodel-codegen:
#   filename:  event-feed-array.json
#   timestamp: 2023-08-23T22:13:24+00:00
# Manually edited to improve type annotations and fix mistakes.

from abc import ABC, abstractmethod
from dataclasses import dataclass
from enum import StrEnum
from typing import Optional, TypeAlias


class EventType(StrEnum):
    contest = "contests"
    judgement_types = "judgement-types"
    languages = "languages"
    problems = "problems"
    groups = "groups"
    organizations = "organizations"
    persons = "persons"
    accounts = "accounts"
    teams = "teams"
    state = "state"
    submissions = "submissions"
    judgements = "judgements"
    runs = "runs"
    clarifications = "clarifications"
    awards = "awards"
    commentary = "commentary"
    scoreboard = "scoreboard"
    event_feed = "event-feed"


class EventData(ABC):
    @abstractmethod
    def eventType(self) -> EventType:
        """Event Type"""


Identifier: TypeAlias = str


class ScoreboardType(StrEnum):
    pass_fail = "pass-fail"
    score = "score"


Abstime: TypeAlias = str


Posreltime: TypeAlias = str


class Mime(StrEnum):
    image_png = "image/png"
    image_jpeg = "image/jpeg"
    image_svg_xml = "image/svg+xml"


@dataclass
class Fileref:
    href: str
    mime: str
    hash: Optional[str] = None
    filename: Optional[str] = None
    width: Optional[int] = None
    height: Optional[int] = None


@dataclass
class Location:
    latitude: float
    longitude: float


class JudgementTypeId(StrEnum):
    AC = "AC"
    RE = "RE"
    WA = "WA"
    TLE = "TLE"
    RTE = "RTE"
    CE = "CE"
    APE = "APE"
    OLE = "OLE"
    PE = "PE"
    EO = "EO"
    IO = "IO"
    NO = "NO"
    WTL = "WTL"
    ILE = "ILE"
    TCO = "TCO"
    TWA = "TWA"
    TPE = "TPE"
    TEO = "TEO"
    TIO = "TIO"
    TNO = "TNO"
    MLE = "MLE"
    SV = "SV"
    IF = "IF"
    RCO = "RCO"
    RWA = "RWA"
    RPE = "RPE"
    REO = "REO"
    RIO = "RIO"
    RNO = "RNO"
    CTL = "CTL"
    JE = "JE"
    SE = "SE"
    CS = "CS"


@dataclass
class Command:
    command: str
    args: Optional[str] = None
    version: Optional[str] = None
    version_command: Optional[str] = None


@dataclass
class Location1:
    x: float
    y: float
    rotation: float


class SexEnum(StrEnum):
    male = "male"
    female = "female"


class Role(StrEnum):
    contestant = "contestant"
    coach = "coach"
    staff = "staff"
    other = "other"


class AccountTypeEnum(StrEnum):
    team = "team"
    judge = "judge"
    admin = "admin"
    analyst = "analyst"
    staff = "staff"


Reltime: TypeAlias = str


@dataclass
class Run(EventData):
    def eventType(self) -> EventType:
        return EventType.runs

    id: Identifier
    judgement_id: Identifier
    ordinal: int
    judgement_type_id: JudgementTypeId
    time: Abstime
    contest_time: Reltime
    run_time: Optional[float] = None


@dataclass
class Award(EventData):
    def eventType(self) -> EventType:
        return EventType.awards

    id: Identifier
    citation: str
    team_ids: list[Identifier]


@dataclass
class Imageref(Fileref):
    # mime: Optional[Mime] = None
    pass


@dataclass
class JudgementType(EventData):
    def eventType(self) -> EventType:
        return EventType.judgement_types

    id: JudgementTypeId
    name: str
    solved: bool
    penalty: Optional[bool] = None


@dataclass
class Problem(EventData):
    def eventType(self) -> EventType:
        return EventType.problems

    id: Identifier
    label: str
    name: str
    ordinal: int
    test_data_count: int
    uuid: Optional[str] = None
    rgb: Optional[str] = None
    color: Optional[str] = None
    time_limit: Optional[float] = None
    max_score: Optional[float] = None
    package: Optional[list[Fileref]] = None
    statement: Optional[list[Fileref]] = None


@dataclass
class Group(EventData):
    def eventType(self) -> EventType:
        return EventType.groups

    id: Identifier
    name: str
    icpc_id: str
    type: Optional[str] = None
    location: Optional[Location] = None


@dataclass
class Account(EventData):
    def eventType(self) -> EventType:
        return EventType.accounts

    id: Identifier
    username: str
    type: Optional[AccountTypeEnum]
    password: Optional[str] = None
    name: Optional[str] = None
    ip: Optional[str] = None
    team_id: Optional[Identifier] = None
    person_id: Optional[Identifier] = None


@dataclass
class State(EventData):
    def eventType(self) -> EventType:
        return EventType.state

    started: Optional[Abstime]
    ended: Optional[Abstime]
    finalized: Optional[Abstime]
    end_of_updates: Optional[Abstime]
    frozen: Optional[Abstime] = None
    thawed: Optional[Abstime] = None


@dataclass
class Submission(EventData):
    def eventType(self) -> EventType:
        return EventType.submissions

    id: Identifier
    language_id: Identifier
    problem_id: Identifier
    team_id: Identifier
    time: Abstime
    contest_time: Reltime
    files: list[Fileref]
    entry_point: Optional[str] = None
    reaction: Optional[list[Fileref]] = None


@dataclass
class Judgement(EventData):
    def eventType(self) -> EventType:
        return EventType.judgements

    id: Identifier
    submission_id: Identifier
    start_time: Abstime
    start_contest_time: Reltime
    end_time: Optional[Abstime]
    end_contest_time: Optional[Reltime]
    judgement_type_id: Optional[JudgementTypeId] = None
    max_run_time: Optional[float] = None


@dataclass
class Clarification(EventData):
    def eventType(self) -> EventType:
        return EventType.clarifications

    id: Identifier
    text: str
    time: Abstime
    contest_time: Reltime
    from_team_id: Optional[Identifier] = None
    to_team_id: Optional[Identifier] = None
    reply_to_id: Optional[Identifier] = None
    problem_id: Optional[Identifier] = None


@dataclass
class Commentary(EventData):
    def eventType(self) -> EventType:
        return EventType.commentary

    id: Identifier
    time: Abstime
    contest_time: Reltime
    message: str
    team_ids: Optional[list[Identifier]]
    problem_ids: Optional[list[Identifier]]


@dataclass
class Language(EventData):
    def eventType(self) -> EventType:
        return EventType.languages

    id: Identifier
    name: str
    entry_point_required: bool
    extensions: list[str]
    entry_point_name: Optional[str] = None
    compiler: Optional[Command] = None
    runner: Optional[Command] = None


@dataclass
class Organization(EventData):
    def eventType(self) -> EventType:
        return EventType.organizations

    id: Identifier
    name: str
    icpc_id: Optional[str] = None
    formal_name: Optional[str] = None
    country: Optional[str] = None
    country_flag: Optional[list[Imageref]] = None
    url: Optional[str] = None
    twitter_hashtag: Optional[str] = None
    twitter_account: Optional[str] = None
    location: Optional[Location] = None
    logo: Optional[list[Imageref]] = None


@dataclass
class Team(EventData):
    def eventType(self) -> EventType:
        return EventType.teams

    id: Identifier
    name: str
    # label: str
    icpc_id: Optional[str] = None
    display_name: Optional[str] = None
    organization_id: Optional[Identifier] = None
    group_ids: Optional[list[Identifier]] = None
    hidden: Optional[bool] = None
    location: Optional[Location1] = None
    photo: Optional[list[Imageref]] = None
    video: Optional[list[Fileref]] = None
    backup: Optional[list[Fileref]] = None
    key_log: Optional[list[Fileref]] = None
    tool_data: Optional[list[Fileref]] = None
    desktop: Optional[list[Fileref]] = None
    webcam: Optional[list[Fileref]] = None
    audio: Optional[list[Fileref]] = None


@dataclass
class Person(EventData):
    def eventType(self) -> EventType:
        return EventType.persons

    id: Identifier
    name: str
    role: Role
    team_ids: Optional[list[Identifier]] = None
    icpc_id: Optional[str] = None
    title: Optional[str] = None
    email: Optional[str] = None
    sex: Optional[SexEnum] = None
    photo: Optional[list[Imageref]] = None


@dataclass
class Contest(EventData):
    def eventType(self) -> EventType:
        return EventType.contest

    id: Identifier
    name: str
    duration: Posreltime
    scoreboard_type: ScoreboardType
    formal_name: Optional[str] = None
    start_time: Optional[Abstime] = None
    countdown_pause_time: Optional[Posreltime] = None
    scoreboard_freeze_duration: Optional[Posreltime] = None
    penalty_time: Optional[int] = None
    banner: Optional[list[Imageref]] = None
    logo: Optional[list[Imageref]] = None
    location: Optional[Location] = None


@dataclass
class Event:
    type: EventType
    data: Optional[EventData | list[EventData]]
    id: Optional[Identifier] = None
    token: Optional[str] = None


EventFeed: TypeAlias = list[Event]
